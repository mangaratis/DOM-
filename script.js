'use strict';
/*
September 2, Saturday 2023
About Modal Window
Clicking: Opening a new content and hides rest of the things.

But this time we assining each long selector to variable so that it looks clean and easy to understand.

When you have same class for different elements: A querySelector only selects the first one so instead we have to use querySelectorAll().
This project we have three classes to use same properties so we can select all to use the same properties using querySelectorAll().

Adding and Removing Classes: Manipulating CSS using .hidden class and set display to none.
Then use add and remove classes.

Content is hidden using class hidden property so to make it visible we use class list property.
Syntax: classList.method(add, remove...).('hidden');
what was hidden it will make it visible.

Use of class in cs for similar properties and with that we can entirely manipulate in javaScript. 
So instead using css method to change each first select class then use what css property you want then manipulate the class so that css will also be manipulated.

How X is for existing how? It's just using button.

Why we are not using functionName() this because it will call after it is invoke but we don't want that we want it to be invoked only when button is clicked: so just declare it without ().
Particular action must take to invoke the function without ().

To use function expression first: You have to declare or intialize before to use it.

Using key to close the content.
keyup: lift a finger off the key
keypress: fired continuously keep our finger on a certain key
keydown: is execute when we press down the key

Three things: modal, overlay: visible and closed + esc button: closed.
*/

const modal = document.querySelector('.modal');
const overlay = document.querySelector('.overlay');
const btnsOpenModal = document.querySelectorAll('.show-modal');
const btnCloseModal = document.querySelector('.close-modal');
const unhideClick = function () {
    // Remove Just remove
    modal.classList.remove('hidden');
    overlay.classList.remove('hidden');
}

// Creating for loop for each show modal
for (let i = 0; i < btnsOpenModal.length; i++) {
    console.log(btnsOpenModal[i].textContent);
    //Removing hidden and making content visible.
    // Event: Clicking so we have to use event handler.

    // btnsOpenModal[i].addEventListener('click', function () {
    //     // Content is showing
    //     modal.classList.remove('hidden');
    //     // Background are blur
    //     overlay.classList.remove('hidden');

    // })
    btnsOpenModal[i].addEventListener('click', unhideClick);

    // How to be back to original one just calling so that it will use its hidden property to make what it was.

}

// btnCloseModal.addEventListener('click', function () {
//     // Making what was it before.
//     modal.classList.add('hidden');
//     overlay.classList.add('hidden');
// })

const myclick = function () {
    // Using add because we want original one back 
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
}
btnCloseModal.addEventListener('click', myclick);
overlay.addEventListener('click', myclick);

// It's because of selecting document it will react whatever wherver happen in the page. document: trigger the event handler 

// Execute when any key presee happens
// Event obj: javascript will provied an object when argument is passed.
// What I clicked is passed and a obj generated by javascript. Event: Clicked one is passed.
document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape' || e.key === 'Enter' && !modal.classList.contains('hidden')) {

        // But it should know when content was visible to exit it.
        // Close the modal when it is visible: Only conditon
        //if (!modal.classList.contains('hidden')) {
        // When it was visible
        // It is hidden: modal.classlist.contains('hidden)
        //It is visible: modal.classlist.contains('hidden')

        // Now we need to call the function
        myclick();
    }

})
document.addEventListener('keydown', function (e) {
    if (e.key === "Enter" && !modal.classList.contains('hidden')) {
        myclick();
    }
})








